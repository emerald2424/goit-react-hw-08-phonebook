{"version":3,"file":"static/js/991.27857540.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","redux/filter/selectors.js","components/Filter/Filter.styled.js","components/Filter/Filter.js","components/ContactListItem/ContactListItem.styled.js","components/ContactListItem/ContactListItem.js","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.js","pages/Contacts.js"],"sourcesContent":["import { createSelector } from \"@reduxjs/toolkit\";\nimport { selectFilter } from \"redux/filter/selectors\";\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const selectfilteredContacts = createSelector(\n    [selectContacts, selectFilter],\n    (contacts, filter) => {\n        const searchedName = filter.toLowerCase();\n        return contacts.filter(contact =>\n            contact.name.toLowerCase().includes(searchedName)\n    );\n    }\n)","export const selectFilter = state => state.filter;\n\n","import styled from 'styled-components';\n\nexport const Form = styled.div`\ntext-align: center;\n`\nexport const Label = styled.label`\n    \n  input {\n    display: block;\n    margin-top: 10px;\n    margin-right: auto;\n    margin-left: auto;\n    width: 320px;\n    border: 1.5px solid #c8c9cc;\n    border-radius: 2px;\n    outline: none;\n  }\n\n  input:focus {\n    border: 2px solid #72a1ed;\n    border-radius: 2px;\n  }\n  \n`;\n","import {Label} from './Filter.styled';\nimport {Form } from './Filter.styled';\nimport { useSelector } from 'react-redux';\nimport { useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/filter/slice';\n\nexport const Filter = () => {\n  const value = useSelector(state => state.filter);\n  const dispatch = useDispatch();\n\n  return (\n    <Form>\n      <Label>\n      Find contacts by name\n      <input\n        type=\"text\"\n        name=\"filter\"\n        value={value}\n        onChange={e => dispatch(setFilter(e.target.value))}\n      />\n      </Label>\n    </Form> \n  );\n}\n","import styled from 'styled-components';\n\nexport const ListItem = styled.li`\n    display: flex;\n    gap: 8px;\n    align-items: center;\n`","import { ListItem } from './ContactListItem.styled';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { Button } from '@mui/material';\nimport DeleteIcon from '@mui/icons-material/Delete';\n\nexport const ContactListItem = ({ contact }) => {\n  const { name, number, id } = contact;\n  const dispatch = useDispatch();\n\n  return (\n    <ListItem key={id}>\n      {name}: {number}\n      <Button\n        variant=\"outlined\"\n        size=\"small\"\n        startIcon={<DeleteIcon />}\n        type=\"button\"\n        onClick={() => dispatch(deleteContact(id))}\n      >\n        Delete\n      </Button>\n    </ListItem>\n  );\n};\n\nContactListItem.propTypes = {\n  contact: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }),\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n    display: flex;\n    flex-direction: column;\n    gap: 15px;\n    margin-top: 20px;\n    align-content: space-around;\n    flex-wrap: wrap;\n    list-style-type: circle;\n`","import { ContactListItem } from '../ContactListItem/ContactListItem';\nimport { List } from './ContactList.styled';\nimport { useSelector } from 'react-redux';\nimport { selectfilteredContacts } from 'redux/contacts/selectors';\n\nexport const ContactList = () => {\n  const filteredContacts = useSelector(selectfilteredContacts);\n\n  return (\n    <List>\n      {filteredContacts.map(contact => (\n        <ContactListItem\n          contact={contact}\n          key={contact.id}\n        ></ContactListItem>\n      ))}\n    </List>\n  );\n} \n","import styled from \"styled-components\";\nimport { Form as FormikForm, ErrorMessage as FormikMessage } from 'formik';\n\nexport const Form = styled(FormikForm)`\n    border: 1.5px solid black;\n    width: 480px;\n    margin: 0 auto;\n    padding: 15px;\n    display: flex;\n    flex-direction: column;\n    gap: 15px;\n    font-weight: 500;\n\n    input {\n        display: block;\n        margin-top: 6px;\n        padding: 6px;\n        width: 460px;\n        outline: none;\n        border: 1.5px solid #c8c9cc;\n        border-radius: 2px;\n    }\n\n    input:focus {\n        border: 2px solid #72a1ed;\n        border-radius: 2px;\n    }\n    button {\n        display: inline-block;\n        width: 140px;\n    }\n`\nexport const ErrorMessage = styled(FormikMessage)`\n    display: inline-block;\n    margin: 0;\n    padding: 0;\n    font-size: 12px;\n    font-weight: normal;\n    color: red;\n`\n","import { nanoid } from 'nanoid';\nimport { Form, ErrorMessage } from './ContactForm.styled';\nimport { Formik, Field } from 'formik';\nimport * as Yup from 'yup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\nimport { Button } from '@mui/material';\n\nexport const ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = contact => {\n    const names = contacts.map(contact => contact.name.toLowerCase());\n    if (names.includes(contact.name.toLowerCase())) {\n      return alert(`${contact.name} is already in contacts`);\n    }\n    dispatch(addContact(contact));\n  };\n\n  const ContactSchema = Yup.object().shape({\n    name: Yup.string()\n      .matches(\n        /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n        'Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer'\n      )\n      .required('Required'),\n\n    number: Yup.string()\n      .matches(\n        /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n        'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n      )\n      .required('Required'),\n  });\n\n  return (\n    <Formik\n      initialValues={{ name: '', number: '' }}\n      validationSchema={ContactSchema}\n      onSubmit={(values, actions) => {\n        handleSubmit(\n          {\n            ...values,\n            id: nanoid(),\n          }\n        );\n        \n        actions.resetForm()\n      }}\n    >\n      <Form>\n        <label>\n          Name\n          <Field type=\"text\" name=\"name\" />\n          <ErrorMessage name=\"name\" component=\"span\"></ErrorMessage>\n        </label>\n\n        <label>\n          Number\n          <Field type=\"tel\" name=\"number\" />\n          <ErrorMessage name=\"number\" component=\"span\"></ErrorMessage>\n        </label>\n\n        <Button variant=\"contained\" size=\"small\" type=\"submit\">Add contact</Button>\n      </Form>\n    </Formik>\n  );\n};\n\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectContacts,\n  selectIsLoading,\n  selectError,\n} from 'redux/contacts/selectors';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n\n  const items = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <h1>Phonebook</h1>\n      <ContactForm></ContactForm>\n      <h2> Your contacts</h2>\n      <Filter></Filter>\n      {isLoading && <h3 style={{ fontWeight: '400'}}>Processing...</h3>}\n      {error && <p style={{ paddingLeft: '120px' }}>{error}</p>}\n      {items && items.length > 0 && <ContactList />}\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectfilteredContacts","createSelector","filter","searchedName","toLowerCase","contact","name","includes","Form","styled","Label","Filter","value","useSelector","dispatch","useDispatch","type","onChange","e","setFilter","target","ListItem","ContactListItem","number","id","Button","variant","size","startIcon","Delete","onClick","deleteContact","List","ContactList","filteredContacts","map","FormikForm","ErrorMessage","FormikMessage","ContactForm","ContactSchema","Yup","shape","matches","required","initialValues","validationSchema","onSubmit","values","actions","names","alert","addContact","handleSubmit","nanoid","resetForm","component","useEffect","fetchContacts","style","fontWeight","paddingLeft","length"],"sourceRoot":""}